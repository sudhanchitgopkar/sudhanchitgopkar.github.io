.. CosmicSansPackage documentation master file, created by
   sphinx-quickstart on Wed Dec 13 14:04:39 2023.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

**Introduction**
================

CosmicSans allows you to query, process, analyze, and visualize astronomical data from SDSS DR18 or your database of choice. The class has a variety of modules that assist you through all aspects of getting the astronomical data you need and analyzing it as you desire. Check out our installation guide below to get started, or get an overview of the modules in the package through the module overview! All source code is available under the GPLv3 and open source contributions to this library are welcome.

**Installation**
=================

On MacOS, install ``CosmicSansPackage`` from the Test PyPi server using the following shell command::

$ python3 -m pip install --index https://test.pypi.org/simple CosmicSansPackage --extra-index-url https://pypi.org/simple

Similarly on Windows machines, you can run::

$ py -m pip install --index https://test.pypi.org/simple CosmicSansPackage --extra-index-url https://pypi.org/simple

or you can view the Test PyPi homepage `here <https://test.pypi.org/project/CosmicSansPackage>`_ along with our GitHub repo `here <https://code.harvard.edu/CS107/team08_2023>`_ to view the source code.


**Modules**
============

``db_handler``
^^^^^^^^^^^^^^
``db_handler`` allows users to query astronomy data from one of two sources:

1. SDSS DR18
2. a ``.csv`` file provided as input

For queries made to SDSS DR18, users have the ability to use SQL/ADQL queries or use standard text input to specify the queries themselves. Note for this latter option, there are specific formatting expectations shown in the documentation for ``query_constraints`` in ``CosmicSansPackage.db_handler.SDSSHandler``. This data can be used later for preprocessing, analysis, and visualization.

``data_augmentation``
^^^^^^^^^^^^^^^^^^^^^
``data_augmentation`` provides functionality for calculating derivatives of flux with respect to wavelength given spectral data frames at every data point in the table. The derivatives are appended as a new column to the ``spectrum`` dataframe. The ``take_derivative`` function calculates integral derivatives (1st, 2nd, 3rd...), and the ``take_fractional_derivative`` function calculates GL fractional derivatives (e.g. 1/2, 1/3). These are useful in data analysis applications of astronomical data.

``visualizer``
^^^^^^^^^^^^^^
This module allows the user to create visualizations of spectral and inferred continuum data. The user must have already loaded in spectral and continuum data to a ``Visualizer`` object in order to create a plot. Additionally, all preprocessing must be done to the data before it is passed to a ``Visualizer``. Figures may be saved py passing a path name string to the object in ``create_visualization(path_name)``. 

``interactive_visualizer``
^^^^^^^^^^^^^^^^^^^^^^^^^^
This module extends ``Visualizer`` and allows the user to interact with the plotted data through ``matplotlib`` windows. The numerically-calculated value of the flux is presented using the bounds of the data currently displayed on the screen, and updates in real time after zoom-ins and window drags.

``preprocessing``
^^^^^^^^^^^^^^^^^^
``preprocessing`` handles the proprocessing of data passed in by both the user and the information retrieved from ``db_handler``. Specifically, ``preprocessing`` is able to load and align spectrum/spectra data, and then operate on this spectrum data. Amongst the valid operations include:

1. building the continuum of a spectrum
2. interpolating the flux for some wavelength
3. correcting the redshift of some spectrum or continuum

Other operations for the data queried by the ``db_handler``:

1. normalizing a dataframe on some specific columns
2. removing outliers of a specific spectrum

``cross_matching``
^^^^^^^^^^^^^^^^^^
The ``cross_matching`` module allows users to cross match objects from an SDSS database with objects from other astronomical databases. The supported databases are the PANSTARRS database and Gaia. The matches are done by matching objects with the closest ``ra`` and ``dec`` values, to a degree of closeness that can be specified by the user. The user can verify the purity of their match via the calculate_purity method.


.. Toctree::
   :maxdepth: 2
   :caption: Contents:

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
